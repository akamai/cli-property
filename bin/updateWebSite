#!/usr/bin/env node

// Copyright 2017 Akamai Technologies, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

"use strict";

/**
 * Command line tool to interface with the WebSite library for manipulating the CDN activities on Akamai
 *
 * @author Colin Bendell <colinb@akamai.com>
 */

var path = require('path');

let WebSite = require('../index').WebSite;

let options = require('minimist')(process.argv.slice(2));

function appName() {
    return process.argv[1].replace(/.*\//, "");
}

function help(message="") {
    let app = appName();
    if (message) {
            console.log(`
======================================================================
Usage error: ${message}
======================================================================
`);
    }
    console.log(`Usage: ${app} <TARGET_PROP> [options...]
Where:
TARGET_PROP          is the configuration name. Use either hostnames (eg: www.example.com) or akamai configuration
                     names (eg: example_prod_ion).
--version VERSION    the configuration VERSION of TARGET_PROP to access or for copy/clone the version of SRC_PROP
                     Values are either numbers >= 1 corresponding to versions, 0 for LATEST, -1 for current PROD version
                     or -2 for current STAGING version. Default is LATEST (0).
--copy SRC_PROP      source property for copy
--outfile FILE       stores the rules to FILE
--srcfile FILE       updates TARGET_PROP with the rule contents from FILE. Cannot be used in conjunction with --copy
--activate  ENV      indicates to also activate to ENV. Values include PRODUCTION, STAGING, or both.
--deactivate ENV     deactivate ENV (PRODUCTION, STAGING, or both) from the Akamai platform
--delete             delete property from the system
--create             create new property configuration
--clone SRC_PROP     clone property to a new config
--addhosts HOSTNAMES Create and add hostnames for the specified property, comma delimited.
--delhosts HOSTNAMES Delete specified hostnames from a specified property, comma delimited.
--origin HOSTNAME    Set the origin for the property to the specified value.
--hostnames NAMES    hostnames for the property, comma delimited.  Will create and assign edge hostnames for TARGET_PROP.
--ehn HOSTNAME       edge hostname to use for the property
--cpcode             cpcode to use for create.  Requires contract and group
--contract           contract ID for create or clone.  Requires group
--group              group ID for create or clone.  Requires contract
--section            section for the credentials file
--nocopy             don't copy the hostnames when cloning
--srmap MAP          SureRoute custom map (e.g. example-srt.akasrg.akamai.com)
--srto SRTO_PATH     SureRoute test object with leading slash (e.g. /akamai/akamai-sureroute-test-object.htm)
--srtohost HOST      SureRoutehost custom host header
`);
    process.exit(0);
}

function addHostnames(property, options) {
    if (!options.addhosts) {
        return Promise.resolve();
    }
    return property.addHostnames(options.targetProperty, options.addhosts.split(','));
}

function delHostnames(property, options) {
    if (!options.delhosts) {
        return Promise.resolve();
    }
    return property.delHostnames(options.targetProperty, options.delhosts.split(','))
}

function setOrigin(property, options) {
    if (!options.origin || options.create) {
        return Promise.resolve();
    }
    return property.setOrigin(options.targetProperty, options.origin);
}

function setSureRoute(property, options) {
    if (!options.srmap || options.srto || options.srtohost) {
        return Promise.resolve();
    }
    return property.setSureRoute(options.targetProperty, options.srmap, options.srto, options.srtohost);
}

function updateProperty(property, targetProperty, options) {
    if (options.file)
        return property.updateFromFile(targetProperty, options.file, options.origin);
    if (options.copy)
        return property.copy(options.copy, options.srcver, targetProperty, options.origin);
    return Promise.resolve();
}

function createProperty(property, options) {
    if (!options.create && !options.clone) {
        return Promise.resolve();
    }

    let hostnames;
    if (options.hostnames) {
        hostnames = options.hostnames.split(',')
    }

    if (options.create) {
        if (options.srcfile) {
          return property.createFromFile(hostnames,
                                        options.srcfile,
                                        options.targetProperty,
                                        options.contract,
                                        options.group,
                                        options.cpcode,
                                        options.origin,
                                        options.ehname);

        } else {
            return property.create(hostnames,
                                        options.cpcode,
                                        options.targetProperty,
                                        options.contract,
                                        options.group,
                                        null,
                                        options.origin,
                                        options.ehname);
        }
    } else if (options.clone) {
        return property.createFromExisting(options.clone,
                                        options.srcVersion,
                                        options.nocopy,
                                        hostnames,
                                        options.targetProperty,
                                        options.contract,
                                        options.group,
                                        options.origin,
                                        options.ehname,
                                        options.cpcode
                                        )
    }
}

function deleteProperty(property, options) {
    if (!options.delete)
        return Promise.resolve;
    return property.deleteProperty(options.targetProperty);
}

function retrieveProperty(property, options) {
    if (!options.retrieve) return Promise.resolve;
    if (options.outfile) {
        return property.retrieveToFile(options.targetProperty, options.outfile, options.version);
    } else {
        return property.retrieve(options.targetProperty, options.version,'-').then(data => {
            console.log(JSON.stringify(data,'',2));
        });
    }
    return Promise.resolve();
}

function activateProperty(property, options, data) {
    if (!options.activate)
        return Promise.resolve();

    let env = options.activate.toUpperCase();
    return Promise.resolve()
        .then(() => {
            if (data && data.propertyVersion)
                return Promise.resolve(data);
            return property.lookupPropertyIdFromHost(options.targetProperty);
        })
        .then(data => {
            options.activateVersion = data.propertyVersion;
            if ("BOTH" === env || env.startsWith("STAG"))
                return property.activate(options.targetProperty, options.version, WebSite.AKAMAI_ENV.STAGING,
                    "Updated Automatically to staging.", options.email);
            return Promise.resolve(data);
        })
        .then(data => {
            if ("BOTH" === env || env.startsWith("PROD"))
                return property.activate(options.targetProperty, options.version, WebSite.AKAMAI_ENV.PRODUCTION,
                    "Updated Automatically to prod.", options.email);
            return Promise.resolve(data);
        });
}

function deactivateProperty(property, options, data) {
    if (!options.deactivate)
        return Promise.resolve();

    let env = options.deactivate.toUpperCase();
    return Promise.resolve()
        .then(data => {
            if ("BOTH" === env || env.startsWith("STAG"))
               return property.deactivate(options.targetProperty, WebSite.AKAMAI_ENV.STAGING,
                    "Automatically deactivating on staging.", options.email);
            return Promise.resolve(data);
        })
        .then(data => {
            if ("BOTH" === env || env.startsWith("PROD"))
                return property.deactivate(options.targetProperty, WebSite.AKAMAI_ENV.PRODUCTION,
                    "Automatically deactivating on prod.", options.email);
            return Promise.resolve(data);
        });
}

function main()
{
    if (options._.length <= 0) {
       help("Don't forget to specify the target property (no flag)");
    }

    // Process arguments with no flag
    options._.forEach(function(argument) {
        if (argument.match('--')) {
            options[argument] = true
        } else {
            options.targetProperty = argument;
        }
    })

    if (options.help) help();

    if (options.version && Number.isNaN(Number(options.version)) || options.version < -2)
        help();

    if (options.copy) {
        if (options.version) srcVersion = options.version
        if (options.fromfile) help("Cannot specify both a source file and a source property.")
    }

    if (options.update) {
        if (options.srcfile) options.fromFile = options.srcfile
    }
    if (options.activate) {
        let env = options.activate.toUpperCase();
        if ("BOTH" != env && !env.startsWith("STAG") && !env.startsWith("PROD"))
           help("--activate (STAGING, PRODUCTION, BOTH)");
    }

    if (options.deactivate) {
        options.deactivate = options.deactivate.toUpperCase();
        if ("BOTH" != env && !env.startsWith("STAG") && !env.startsWith("PROD"))
           help("--deactivate (STAGING, PRODUCTION, BOTH)");
     }

     if (options.cpcode) {
         if (!(options.group && options.contract)) help("Cannot specify cpcode without contract and group");
     }

     if (options.group || options.contract) {
         if (!(options.group && options.contract)) help("Need both contract and group")
     }

     if (!options.section) {
         options.section = "papi";
     }

        let property = new WebSite({path:"~/.edgerc", section: options.section});

        let app = appName();
        console.time(app);

        Promise.resolve()
            .then(() => createProperty(property, options))
            .then(() => delHostnames(property, options))
            .then(() => addHostnames(property, options))
            .then(() => setOrigin(property, options))
            .then(() => updateProperty(property, options))
            .then(data => activateProperty(property, options, data))
            .then(data => deactivateProperty(property, options, data))
            .then(data => retrieveProperty(property, options))
            .then(data => deleteProperty(property, options))
            .then(() => {
                console.timeEnd(app);
                console.info("Success!");
            })
            .catch((error) => {
                console.timeEnd(app);
                console.error("ERROR: ", error.body || JSON.stringify(error));
                if (error.stack) console.log(error.stack);
            });
    }

main();
